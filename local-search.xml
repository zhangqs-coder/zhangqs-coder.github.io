<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JavaOptional的学习</title>
    <link href="/2024/08/15/JavaOptional%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/08/15/JavaOptional%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="学习Optional，优雅判空"><a href="#学习Optional，优雅判空" class="headerlink" title="学习Optional，优雅判空"></a>学习Optional，优雅判空</h1><p>​在Java中，<code>Optional.ofNullable(object).isPresent()</code> 是一种用于检查对象是否为 <code>null</code> 的常用方法。具体来说，这段代码的作用是：</p><ol><li><code>Optional.ofNullable(object)</code>：<ul><li>这个方法创建一个 <code>Optional</code> 对象。<code>Optional</code> 是一种容器，用于避免直接使用 <code>null</code> 值，从而减少 <code>NullPointerException</code> 的风险。</li><li>如果 <code>customer</code> 为 <code>null</code>，则 <code>Optional</code> 对象会是一个空的 <code>Optional</code>；如果 <code>customer</code> 不为 <code>null</code>，则 <code>Optional</code> 包含 <code>customer</code> 对象。</li></ul></li><li><code>.isPresent()</code>：<ul><li>这个方法检查 <code>Optional</code> 中是否包含一个非空值。如果包含，则返回 <code>true</code>；否则返回 <code>false</code>。</li></ul></li></ol><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerService</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processCustomer</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 使用 Optional 检查 customer 是否为 null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// customer 不为 null，进行处理</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Processing customer: "</span> <span class="token operator">+</span> customer<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// customer 为 null，处理缺失情况</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Customer is null, cannot process."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CustomerService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Customer</span> customer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">"John Doe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> customer2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                service<span class="token punctuation">.</span><span class="token function">processCustomer</span><span class="token punctuation">(</span>customer1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理客户</span>        service<span class="token punctuation">.</span><span class="token function">processCustomer</span><span class="token punctuation">(</span>customer2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理 null 客户</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="使用-Optional-的好处"><a href="#使用-Optional-的好处" class="headerlink" title="使用 Optional 的好处"></a>使用 <code>Optional</code> 的好处</h3><ul><li><strong>避免 <code>NullPointerException</code></strong>: 使用 <code>Optional</code> 可以有效地避免因 <code>null</code> 引起的异常。</li><li><strong>增强可读性</strong>: 明确表明某个变量可能为 <code>null</code>，使代码更加清晰。</li><li><strong>流式操作</strong>: <code>Optional</code> 提供了一些流式操作的方法（如 <code>map</code>, <code>flatMap</code>, <code>filter</code>），可以更方便地进行链式调用。</li></ul><h3 id="替代方案"><a href="#替代方案" class="headerlink" title="替代方案"></a>替代方案</h3><p>​有时，使用 <code>Optional</code> 可能不是最合适的选择，尤其是在性能敏感的场合或在一些简单的条件检查中。可以考虑直接使用简单的 <code>if</code> 检查，例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>customer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 处理 customer</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>这两种方式各有优缺点，选择哪种方式应根据具体情况而定。</p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>订单重复提交问题</title>
    <link href="/2024/08/07/%E8%AE%A2%E5%8D%95%E9%87%8D%E5%A4%8D%E6%8F%90%E4%BA%A4%E9%97%AE%E9%A2%98/"/>
    <url>/2024/08/07/%E8%AE%A2%E5%8D%95%E9%87%8D%E5%A4%8D%E6%8F%90%E4%BA%A4%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="解决订单重复提交问题"><a href="#解决订单重复提交问题" class="headerlink" title="解决订单重复提交问题"></a>解决订单重复提交问题</h1><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>​工作开发的项目中对于订单的处理还不够完善，在网络卡顿,恶意提交或者移动端提交后返回等，都会导致订单重复创建，导致数据出错。</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>​导致重复生成订单的原因是业务人员在生成订单后返回至前一个页面，继续点击生成订单按钮.解决方式很多，只要有唯一的标识，让系统知道这个订单已经存在，不能继续生成。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>​使用UUID随机生成一个不重复的字符串，并存放至Redis中，在生成订单时，存放至Redis，并且每次生成订单去判断Redis中是否存在这个Key，如果存在则直接返回，并提示订单已经生成，不存在则生成token存入Redis。(此方案后续还需要根据业务并发修改)</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">cacheOrderSubmitToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用UUID随机生成一串字符</span>    stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">getOrderSubmitTokenKey</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">,</span>            token<span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">5L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//过期时间暂设置</span>    <span class="token keyword">return</span> token<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">takeOrderSubmitToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token function">getOrderSubmitTokenKey</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAndDelete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="常见的实现方案"><a href="#常见的实现方案" class="headerlink" title="常见的实现方案"></a>常见的实现方案</h2><ul><li><strong>唯一订单号生成</strong>：每次生成唯一的订单号，确保订单号在系统中是唯一的，可以基于数据库的自增主键、UUID等方式实现。</li><li><strong>数据库约束</strong>：在数据库中通过唯一约束（Unique Constraint）或者索引来确保订单号的唯一性，防止重复插入相同订单号的订单。</li><li><strong>Token机制</strong>：通过生成一个单次有效的token，将token与订单绑定，再次提交时校验token的有效性，避免重复提交。</li><li><strong>状态标记</strong>：在处理订单时，记录订单状态，避免已处理的订单再次被处理。</li></ul><p>​</p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis查询记录数量与数据库直接查询不一致</title>
    <link href="/2024/07/29/Mybatis%E6%9F%A5%E8%AF%A2%E8%AE%B0%E5%BD%95%E6%95%B0%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B4%E6%8E%A5%E6%9F%A5%E8%AF%A2%E4%B8%8D%E4%B8%80%E8%87%B4/"/>
    <url>/2024/07/29/Mybatis%E6%9F%A5%E8%AF%A2%E8%AE%B0%E5%BD%95%E6%95%B0%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B4%E6%8E%A5%E6%9F%A5%E8%AF%A2%E4%B8%8D%E4%B8%80%E8%87%B4/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>​今天改bug，发现一个查询代码查出来的集合数只有一个，然后将其sql语句拿到数据库客户端查询，发现是多个</p><h1 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h1><p>​通过一层一层的追溯，原来是Mybatis的xml映射不全导致的问题。xml内容类似与下面xml代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findUserInfoListForMap<span class="token punctuation">"</span></span>    <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     SELECT  p.name, u.u_name,u.company,u.proComany,u.mobile,u.email, r.money     FROM user u     LEFT JOIN raiseentry r on r.userId=u.id     LEFT JOIN project p on r.sourceId=p.projectId... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>​ 经细心验证，BaseResultMap中的属性均有配全，但是该语句执行时返回的<strong>记录条数</strong>与直接在数据库中查询的<strong>不一致</strong>。</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">     但是改成如下语句后，（多了个查询字段u.id）发现查询的结果正常了</code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findUserInfoListForMap<span class="token punctuation">"</span></span>    <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     SELECT u.id, p.name, u.u_name,u.company,u.proComany,u.mobile,u.email, r.money     FROM user u     LEFT JOIN raiseentry r on r.userId=u.id     LEFT JOIN project p on r.sourceId=p.projectId... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>可以使用select * from table 语句防止遗漏</li><li>以u.id，p.name，u.u_name这种形式一一匹配resultMap中的字段</li><li>用resultType属性自动映射自动将表中的字段与类中的属性进行关联映射(单表)</li><li>将需要的字段封装成DTO对象，在xml中使用resultType对应</li></ol>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring中的ApplicationContext事件机制</title>
    <link href="/2024/07/24/Spring%E4%B8%AD%E7%9A%84ApplicationContext%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
    <url>/2024/07/24/Spring%E4%B8%AD%E7%9A%84ApplicationContext%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring中的ApplicationContext事件机制"><a href="#Spring中的ApplicationContext事件机制" class="headerlink" title="Spring中的ApplicationContext事件机制"></a>Spring中的ApplicationContext事件机制</h1><p>​今天看到了ac.publishEvent(event)的写法，这个事件处理机制在学习中没有怎么去写，公司里面是用来处理与主程序无关的流程，这里想到了平时用的比较多的异步线程去处理的方式，今天来学习ApplicationContext事件机制.</p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>​ApplicationContext的事件机制是观察者设计模式的实现，通过 ApplicationEvent 类和 ApplicationListener 接口，可以实现 Application Context 的事件处理。如果容器中有一个 ApplicationListener Bean 每当 ApplicationContext 发布 ApplicationEvent时，ApplicationListene r Bean将自动触发，主要有两个成员: ①ApplicationEvent: 容器事件    ②ApplicationListener: 监听器</p><p>下图简单示范了ApplicationContext事件</p><p><img src="/2024/07/24/Spring%E4%B8%AD%E7%9A%84ApplicationContext%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/pic.png" alt="图片"></p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>​程序先定义了一个ApplicationContext类，其对象就是一个Spring容器事件。代码如下:</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationEvent</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailEvent</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">7056841418193254583L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">EmailEvent</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token class-name">String</span> address<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> text<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setText</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>​上面的EmailEvent类继承了ApplicationContext类，除此之外，它就是一个普通的Java类。</p><p>​容器的监听器必须实现ApplicationListener接口，实现该接口必须实现方法:  onApplicationEvent(ApplicationEvent event)  每当容器内发生任何事件时，此方法都被触发。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationEvent</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationListener</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailNotifier</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApplicationEvent</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token comment">//该方法会在容器发生事件时自动触发</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">EmailEvent</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//只处理EmailEvent，发送Email通知...</span>            <span class="token class-name">EmailEvent</span> emailEvent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EmailEvent</span><span class="token punctuation">)</span>event<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"需要发送的邮件的接收地址:"</span><span class="token operator">+</span>emailEvent<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"需要发送邮件的邮件正文:"</span><span class="token operator">+</span>emailEvent<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">//容器内置时间不做任何处理</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"容器本身事件: "</span><span class="token operator">+</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>​从上面的配置文件中可以看出，为Spring容器注册事件监听器。当我们在Spring配置了一个实现ApplicationListener的Bean。Springl容器就会把这个Bean当初容器的监听器。</p><p>​当系统创建Spring容器，加载Spring容器时会自动触发容器事件，容器事件监听器可以监听到这些事件。除此之外，程序也可调用ApplicationContext的publishEvent方法来主动触发容器事件。如下主程序使用ApplicationContext的publishEvent来触发事件。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ApplicationContext</span> ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建一个ApplicationEvent对象 或者注入</span>        <span class="token class-name">EmailEvent</span> ele <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmailEvent</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ele<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"123456@163.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ele<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//主动触发容器事件</span>        ac<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>​上面的代码通过ApplicationContext对象的publishEvent主动触发该事件。运行上面的程序将看到如下执行结果。</p><p>1 容器本身事件: org.springframework.context.event.ContextRefreshedEvent[source&#x3D;org.springframework.context.support.ClassPathXmlApplicationContext@141b571: startup date [Fri Sep 13 10:16:01 CST 2013]; root of context hierarchy]<br>2 需要发送的邮件的接收地址:<a href="mailto:&#x31;&#x32;&#x33;&#x34;&#x35;&#54;&#x40;&#x31;&#54;&#51;&#46;&#99;&#111;&#109;">&#x31;&#x32;&#x33;&#x34;&#x35;&#54;&#x40;&#x31;&#54;&#51;&#46;&#99;&#111;&#109;</a><br>3 需要发送邮件的邮件正文:Hello World</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​<strong>解耦业务逻辑</strong>：利用ApplicationContext 事件机制,可以解除代码耦合。</p><p>​<strong>异步处理</strong>：某些操作可以通过事件机制异步处理，提升系统响应速度。</p><p>​<strong>扩展性</strong>：可以很容易地添加新的事件处理器，而不会影响现有代码。</p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时间在iphone中显示NaN</title>
    <link href="/2024/07/22/%E6%97%B6%E9%97%B4%E5%9C%A8iphone%E4%B8%AD%E6%98%BE%E7%A4%BANaN/"/>
    <url>/2024/07/22/%E6%97%B6%E9%97%B4%E5%9C%A8iphone%E4%B8%AD%E6%98%BE%E7%A4%BANaN/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="时间在iphone中显示NaN问题"><a href="#时间在iphone中显示NaN问题" class="headerlink" title="时间在iphone中显示NaN问题"></a>时间在iphone中显示NaN问题</h1><h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>​今天公司的公众号测试中，业务人员发现时间显示NaN，当时其他人手机都正常,然后发现是苹果手机,随后去了解怎么去解决显示问题。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>​原来后台返回来的数据是createTime&#x3D;”2024-07-22 12:12:00”，iphone手机是不能对这种格式的时间进行格式化，需要把-改成&#x2F;，解决可以调用formatDate(time, “yyyy-MM-dd”)方法。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">date <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token operator">-</span><span class="token operator">/</span>g<span class="token punctuation">,</span><span class="token char">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>​另外也需要去判断登录的手机是否是Iphone,可以利用Java提供的API判断设备类型,然后在进行进一步的处理,设备在发送HTTP请求时,请求头上会携带User-Agent信息,该信息可以用来描述设备的类型和操作系统版本.通过解析User-Agent来判断设备类型.</p><p>Java中可以使用ServletAPI的HttpServletRequest获取User-Agent信息,代码示例如下.</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpservletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Deviceutils</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isAndroid</span><span class="token punctuation">(</span><span class="token class-name">HttpservletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>string userAgent <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span> <span class="token string">"User-Agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> userAgent <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> userAgent<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span> <span class="token string">"android"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isIphone</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string userAgent <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span> <span class="token string">"User-Agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userAgent <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> userAgent<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"iphone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stream中的GroupingBy</title>
    <link href="/2024/07/21/Stream%E4%B8%AD%E7%9A%84GroupingBy/"/>
    <url>/2024/07/21/Stream%E4%B8%AD%E7%9A%84GroupingBy/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>​今天在工作中写了类似下面这段代码，代码被同事看到说存在问题，今天来学习一下Stream中的groupingBy。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> integerListMap <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>​这段代码本身从语法和功能上来看是正确的，它将list中的字符串元素按照长度进行分组，并将结果存储在integerListMap这个Map&lt;Integer, List<String>&gt;类型的变量中。其中，键（Integer）表示字符串的长度，值（List<String>）则是具有相同长度的所有字符串组成的列表。但是确实存在问题.</p><ol><li><p>检查list是否为空或为null</p><p>​在执行流操作之前，尽量先检查list是否为null或是否为空，以避免不必要的计算或抛出NullPointerException。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> integerListMap <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure></li><li><p>应该使用parallelStream()并行流提高性能</p><p>​如果list非常大，可以使用并行流来提高处理速度。但是要注意，对于大型数据集，这可能需要更多的CPU核心才能看到性能提升。同时，如果integerListMap会被多个线程访问，应该使用线程安全的集合。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> integerListMap <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingByConcurrent</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure></li><li><p>如果需要顺序输出需要使用LinkedHashMap保持插入顺序</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> integerListMap <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">,</span>                                                                                <span class="token class-name">LinkedHashMap</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">,</span>                                                                                <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li><li><p>避免不必要的分组</p><p>​如果list中的字符串长度分布非常不均，可能会导致某些长度的字符串非常多，而其他长度则几乎没有。在这种情况下，考虑是否真的需要对所有长度都进行分组，或者是否有更高效的数据结构或算法可以使用。</p></li></ol><p><strong>代码已改正√</strong></p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇文章</title>
    <link href="/2024/07/20/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/2024/07/20/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="如何安装Java"><a href="#如何安装Java" class="headerlink" title="如何安装Java"></a>如何安装Java</h1><ol><li><p>前往Oracle官方下载JDK<a href="https://www.oracle.com/cn/java/">Java 软件 | Oracle 中国</a></p><p><img src="/2024/07/20/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/test.png" alt="安装图片"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
